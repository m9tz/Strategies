
import numpy as np
import math as math
from collections import OrderedDict

SYMBOLS = ["KSMUSDT", "BNBUSDT", "ADAUSDT", "LINKUSDT", "DOTUSDT"]


'''
In this example we will be using the state object which can be used to pass information between handlers.
Here, we initialize a variable indicating the current trend on the state object directly.
'''
def initialize(state):
    state.trend = None
    state.number_offset_trades = 0

    state.tp_newposition =  {'KSMUSDT' : False, 'BNBUSDT' : False, 'ADAUSDT' : False, "LINKUSDT" : False, "DOTUSDT" : False}
    state.tp_position =   {'KSMUSDT' : 0, 'BNBUSDT' : 0, 'ADAUSDT' : 0, "LINKUSDT" : 0, "DOTUSDT" : 0}
    state.tp_weight = {'KSMUSDT' : 1, 'BNBUSDT' : 1, 'ADAUSDT' : 1, "LINKUSDT" : 1, "DOTUSDT" : 1}
    state.has_position = {'KSMUSDT' : False, 'BNBUSDT' : False, 'ADAUSDT' : False, "LINKUSDT" : False, "DOTUSDT" : False}

    state.signals_6h = {}
    state.signals_15m = {}
    state.pnl = {}
    state.unrealized_pnl = {}
    state.weight = {}
    state.current_price = {}
    state.balance_base = {}
    state.price_change = {'KSMUSDT' : 0, 'BNBUSDT' : 0, 'ADAUSDT' : 0, "LINKUSDT" : 0, "DOTUSDT" : 0}


############################## CALCULATE PERCENTAGE CHANGE ##################################

def calc_pc(currentPoint, startPoint):
    pc = ((float(currentPoint)-startPoint)/abs(startPoint)) * 100 
    return float(pc)

############################## CALCULATE MAXIMAL VALUE#######################################
def maximum(l):
    a = []
    for eachN in l.values():
        a.append(eachN)
    max_val = max(a)
    max_idx = a.index(max_val)
    return max_val, max_idx


############################## COMPUTE 6 HOUR SIGNALS #######################################

def compute_signal_6h(state, data):
    if data is None:
        return

    macd_ind_6h = data.macd(12,26,9)
    signal_6h = macd_ind_6h['macd_signal'].as_np()[0,-2:]
    macd_6h = macd_ind_6h['macd'].ema(3).as_np()[0,-2:]
    hist_6h = macd_ind_6h['macd_histogram'].as_np()[0,-2:]

    macd_6h_pc = calc_pc(math.log(abs(macd_6h[-2])), math.log(abs(macd_6h[-1])))
    signal_6h_pc = calc_pc(math.log(abs(signal_6h[-2])), math.log(abs(signal_6h[-1])))
    hist_6h_pc = calc_pc(math.log(abs(hist_6h[-2])), math.log(abs(hist_6h[-1])))

    macd_6h = macd_6h[-1]
    signal_6h = signal_6h[-1]
    hist_6h = hist_6h[-1] 

    return macd_6h, macd_6h_pc, signal_6h, signal_6h_pc, hist_6h, hist_6h_pc


################################# COMPUTE 15 MINUTE SIGNALS ###################################

def compute_signal_15m(data, state, macd_6h, macd_6h_pc, signal_6h, signal_6h_pc, hist_6h, hist_6h_pc):
    if data is None:
        return
    unrealized_pnl = 0
    weight = 0
    current_price = data.close_last

    macd_ind = data.macd(8,21,5)
    signal = macd_ind['macd_signal'].as_np()[0,-2:]
    macd = macd_ind['macd'].as_np()[0,-2:]
    macd_histogram = macd_ind['macd_histogram'].as_np()[0,-2:]

    atr_ind = data.atr(7)
    atr = atr_ind['atr'].last

    rolling_high = data.select('high')[-3:-1].max()
    rolling_low = data.select('low')[-3:-1].max()

    if abs(math.log(abs(hist_6h))) >= 1.5:
        chandelier_long = rolling_high - atr[-1] * 1
        chandelier_short = rolling_low - atr[-1] * 1
    elif abs(math.log(abs(hist_6h))) < 1.5: 
        chandelier_long = rolling_high - atr[-1] * 3.5
        chandelier_short = rolling_low - atr[-1] * 3.5
    # print(abs(state.hist_log_array[-1]))

    if  chandelier_short < current_price:
        trend = "upward"
       
    elif chandelier_long > current_price:   
        trend = "downward" 

    portfolio = query_portfolio()
    portvalue = float(query_portfolio_value())
    has_position = has_open_position(data.symbol, include_dust=False)
    balance_quoted = float(query_balance_free(data.quoted))
    balance_base = float(query_balance_free(data.base))

    liquidity = portfolio.excess_liquidity_quoted
    position = query_open_position_by_symbol(data.symbol,include_dust=False)
    
    # print(liquidity, portvalue)
    # if abs(float(liquidity) - float(portvalue)) <= 0:
 
    #     buy_amount = balance_quoted / data.close_last * 0.5
    # else:
    buy_amount = balance_quoted / data.close_last * 0.95
######################################## BUY AND SELL RULES ###################################

    if macd_6h > 0:
        
        if macd_6h_pc > 0 and (hist_6h < 0 and hist_6h_pc < 0) or (hist_6h > 0 and hist_6h_pc > 0 and math.log(abs(hist_6h)) < 0):
            
            if macd[-1] > 0 and macd[-2] < 0 and not has_position:
                print("Buying {} {}@{}".format(data.symbol, buy_amount, data.close_last))
                order_market_amount(symbol=data.symbol, amount=buy_amount)

                    
        if macd_6h_pc < 0 and macd_6h > signal_6h  and ((hist_6h < 0 and hist_6h_pc > 0) or (hist_6h > 0 and hist_6h_pc < 0 )):

            if  trend == 'downward' and has_position:
                print("Selling {} {}@{}".format(data.symbol, balance_base, data.close_last))
                adjust_position(data.symbol, weight=0.01)
                state.tp_newposition[data.symbol] = False
                state.tp_position[data.symbol] = 0

    if macd_6h < 0:

        if macd_6h_pc < 0 and not signal_6h_pc > 0 :
            # and ((state.histogram_6h > 0 and state.hist_avg_pc > 0) or (state.histogram_6h < 0 and state.hist_avg_pc < 0)): 
            if macd[-1] > 0 and macd[-2] < 0 and not has_position:
                print("Buying {} {}@{}".format(data.symbol, buy_amount, data.close_last))
                order_market_amount(symbol=data.symbol, amount=buy_amount)   

        # elif state.macd_avg_pc > 0 and current_price > state.ema_72 and state.histogram_6h > 0 and state.hist_avg_pc < -0.25 and 
        if macd_6h_pc > 0 and math.log(abs(macd_6h)) > 2.5 : 
            if trend == 'downward' and has_position:
                print("Selling {} {}@{}".format(data.symbol, balance_base, data.close_last))
                adjust_position(data.symbol, weight=0.01)
                state.tp_newposition[data.symbol] = False
                state.tp_position[data.symbol] = 0       

    
######################################## SET DYNAMIC SL en TP ##################################

    if has_position:
        price_diff = 100 - ((float(position.entry_price) / float(data.close_last)) * 100)
        state.price_change[data.symbol] = (float(current_price) / float(position.average_price)) * 100
        if  current_price <= float(position.average_price) - (float(position.average_price) * 0.01):
            adjust_position(data.symbol, weight=0.01)
            print("POSITION TO 0.01 [eachN] {} {}@{}".format(data.symbol, balance_base, data.close_last))
            state.tp_newposition[data.symbol] = False
            state.tp_position[data.symbol] = 0
             
#         if  not state.tp_newposition[data.symbol]:
#             if current_price >= float(position.entry_price) + (float(position.entry_price) * 0.025):
#                 print(f"TAKE PROFIT [data.symbol] - POSITION CHANGE Initiated")
#                 state.tp_newposition[data.symbol] = True
#                 state.tp_position[data.symbol] = current_price

# # // DYNAMIC TP - Stage 2 Every 0.15% And Dynamic STOP LOSS Section
        
#         elif state.tp_newposition[data.symbol]:
#             if current_price >= float(state.tp_position[data.symbol]) + (float(position.entry_price) * 0.05):
#                 print(f"TAKE PROFIT [data.symbol] - POSITION CHANGE STAGE 2 - DYNAMIC Every +0.55%]")
#                 state.tp_position[data.symbol] = current_price
#                 adjust_position(data.symbol, weight = state.tp_weight[data.symbol]) 
#                 state.tp_weight[data.symbol] = state.tp_weight[data.symbol] - 0.2
                
                
# # // DYNAMIC SL - Stop Loss for Position Change -0.045%
#             elif current_price <= float(state.tp_position[data.symbol]) - (float(position.entry_price) * 0.035) and price_diff > 0:
#                 print(f"TAKE PROFIT [data.symbol] - After Position Change Initiated")
#                 close_position(data.symbol) 
#                 state.tp_newposition[data.symbol] = False
#                 state.tp_position[data.symbol] = 0
#                 state.tp_weight[data.symbol] = 1

    '''
    5) Check strategy profitability
        > print information profitability on every offsetting trade
    '''

################################# PRINT CUMULATIVE RESULTS #####################################
    if state.number_offset_trades < portfolio.number_of_offsetting_trades:
        
        pnl = query_portfolio_pnl()
        print("-------")
        print("Accumulated Pnl of Strategy: {}".format(pnl))
        
        offset_trades = portfolio.number_of_offsetting_trades
        number_winners = portfolio.number_of_winning_trades
        print("Number of winning trades {}/{}.".format(number_winners,offset_trades))
        print("Best trade Return : {:.2%}".format(portfolio.best_trade_return))
        print("Worst trade Return : {:.2%}".format(portfolio.worst_trade_return))
        print("Average Profit per Winning Trade : {:.2f}".format(portfolio.average_profit_per_winning_trade))
        print("Average Loss per Losing Trade : {:.2f}".format(portfolio.average_loss_per_losing_trade))
        # reset number offset trades
        state.number_offset_trades = portfolio.number_of_offsetting_trades

    if has_position: 
        unrealized_pnl = float(position.unrealized_pnl)
        weight = float(query_position_weight(data.symbol))   
            
    return unrealized_pnl, weight


############################ COMPUTE 100% OF UNREALIZED PNL PER SYMBOL ############################

def w_unreal_pnl(state, data, unreal_pnl, weight): 

    if unreal_pnl != 0:
        unreal_pnl = 100 * (unreal_pnl / (100 * weight))

    return unreal_pnl


############################ RESOLVE 6 HOUR SIGNALS PER SYMBOL ####################################

def resolve_signal_6h(state, data):
    if data is None:
        return
    state.signals_6h[data.symbol] = compute_signal_6h(state, data)


############################ RESOLVE 15 MINUTE SIGNALS PER SYMBOL #################################

def resolve_signal_15m(state, data):
    if data is None:
        return
    try:
        state.signals_15m[data.symbol] = compute_signal_15m(data, state, *state.signals_6h[data.symbol])
        state.current_price[data.symbol] = data.close_last
        state.has_position[data.symbol] = has_open_position(data.symbol, include_dust=False)
        state.pnl[data.symbol] = w_unreal_pnl(state, data, *state.signals_15m[data.symbol])
        state.balance_base[data.symbol] = float(query_balance_free(data.base))
    except KeyError:
        state.signals_15m[data.symbol] = compute_signal_15m(data, state, 0,0,0,0,1,0)
        state.pnl[data.symbol] = w_unreal_pnl(state, data, 0,0)

'''
In this bot the possibility to use different intervals of the same symbols is presented.
'''

@schedule(interval = "6h", symbol = SYMBOLS, window_size = 200)
def handler_6h(state, dataMap):
    for symbol, data in dataMap.items():
        resolve_signal_6h(state, data) 

@schedule(interval = "15m", symbol = SYMBOLS, window_size = 200)
def handler_15m(state, dataMap):



    for symbol, data in dataMap.items():
        resolve_signal_15m(state, data) 

##################### ADJUST POSITION TO 95% FOR SYMBOL WITH HIGHES UNREALIZED PNL ##################

    print(state.price_change)
    max_unreal = maximum(state.price_change)
    print(max_unreal)
    print(state.has_position)
    print(state.balance_base)

    for eachN, value in state.price_change.items():
        if value != max_unreal[0] and state.has_position[eachN] and state.signals_15m[eachN][1] > 0.02:
            adjust_position(symbol=eachN, weight=0.01)
            print("POSITION TO 0.01 [eachN] {} {}@{}".format(eachN, state.balance_base[eachN], state.current_price[eachN]))

        elif value == max_unreal[0] and max_unreal[0] < 100 and state.has_position[eachN] and state.signals_15m[eachN][1] > 0.02:
            adjust_position(symbol=eachN,weight=0.01)
            print("MAX POSITION TO 0.01 [eachN] {} {}@{}".format(eachN, state.balance_base[eachN], state.current_price[eachN]))

        elif value == max_unreal[0] and max_unreal[0] > 101 and state.has_position[eachN] and state.signals_15m[eachN][1] < 0.1:
            adjust_position(symbol=eachN,weight=0.95)
            print("MAX POSITION TO 0.95 [eachN] {} {}@{}".format(eachN, state.balance_base[eachN], state.current_price[eachN]))

    print(state.signals_15m)

########################## COMPUTE PERCENT CHANGE IN UNREALIZED PNL  ################################
    # if w_unreal_pnl_bnb > 0:
    #     state.array_pnl_bnb.append(math.log(abs(w_unreal_pnl_bnb)))
    # else: state.array_pnl_bnb.append(0)    
    # state.array_pnl_bnb = state.array_pnl_bnb[-5:]
    
    # if w_unreal_pnl_eth > 0:
    #     state.array_pnl_eth.append(math.log(abs(w_unreal_pnl_eth)))
    # else: state.array_pnl_eth.append(0)
    # state.array_pnl_eth = state.array_pnl_eth[-5:]
    
    # if w_unreal_pnl_ltc > 0:
    #     state.array_pnl_ltc.append(math.log(abs(w_unreal_pnl_ltc)))
    # else: state.array_pnl_ltc.append(0)
    # state.array_pnl_ltc = state.array_pnl_ltc[-5:]


    # def calc(array):
    #     for eachN in array:
    #         try:
    #             pnl_pc_ltc = calc_pc(eachN, array[-1])
    #         except ZeroDivisionError:
    #             pnl_pc_ltc = 0
    #         return pnl_pc_ltc

    # pnl_pc_bnb = calc(state.array_pnl_bnb)
    # pnl_pc_eth = calc(state.array_pnl_eth)
    # pnl_pc_ltc = calc(state.array_pnl_ltc)

    # unreal_pnl = [pnl_pc_bnb, pnl_pc_eth]

    # try:
    #     pnl_pc_bnb = calc_pc(state.array_pnl_bnb[-2], state.array_pnl_bnb[-1])
    # except ZeroDivisionError:
    #     pnl_pc_bnb = 0

    # try:
    #     pnl_pc_eth = calc_pc(state.array_pnl_eth[-2], state.array_pnl_eth[-1])
    # except ZeroDivisionError:
    #     pnl_pc_eth = 0




